diff --git a/node_modules/typechain/dist/parser/typeParser.js b/node_modules/typechain/dist/parser/typeParser.js
index 93d5265..f5a1959 100644
--- a/node_modules/typechain/dist/parser/typeParser.js
+++ b/node_modules/typechain/dist/parser/typeParser.js
@@ -89,7 +89,7 @@ function parseEvmType(rawType, components) {
         case "byte":
             return new BytesType(1);
         case "bytes":
-            return new ArrayType(new BytesType(1));
+            return new BytesType(1);
         case "tuple":
             if (!components)
                 throw new Error("Tuple specified without components!");
diff --git a/node_modules/typechain/dist/targets/truffle/generation.js b/node_modules/typechain/dist/targets/truffle/generation.js
index 893422e..4255ed6 100644
--- a/node_modules/typechain/dist/targets/truffle/generation.js
+++ b/node_modules/typechain/dist/targets/truffle/generation.js
@@ -4,7 +4,8 @@ const typeParser_1 = require("../../parser/typeParser");
 function codegen(contracts) {
     const template = `
 /// <reference types="truffle-typings" />
-import { BigNumber } from "bignumber.js";
+import BN from "bn.js";
+type BigNumber = string | number | BN;
 
 ${contracts.map(generateContractInterface).join("\n")}
 
diff --git a/node_modules/typechain/dist/targets/web3/index.js b/node_modules/typechain/dist/targets/web3/index.js
index 7647f06..8122d66 100644
--- a/node_modules/typechain/dist/targets/web3/index.js
+++ b/node_modules/typechain/dist/targets/web3/index.js
@@ -31,15 +31,15 @@ class Web3 extends ts_generator_1.TsGeneratorPlugin {
             {
                 path: path_1.join(this.outDirAbs, "types.d.ts"),
                 contents: `
-  import { Transaction } from "web3-core";
+  import { SendOptions } from "web3-eth-contract";
   // @ts-ignore
   import PromiEvent from "web3-core-promievent";
   export type Callback<T> = (error: Error, result: T) => void;
   export interface TransactionObject<T> {
     arguments: any[];
-    call(tx?: Transaction): Promise<T>;
-    send(tx?: Transaction): PromiEvent<T>;
-    estimateGas(tx?: Transaction): Promise<number>;
+    call(sendOptions?: SendOptions): Promise<T>;
+    send(sendOptions?: SendOptions): PromiEvent<T>;
+    estimateGas(sendOptions?: SendOptions): Promise<number>;
     encodeABI(): string;
   }`,
             },
